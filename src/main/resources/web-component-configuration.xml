<?xml version="1.0" encoding="UTF-8"?>

<component-configuration
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://tis.co.jp/nablarch/component-configuration"
        xsi:schemaLocation="http://tis.co.jp/nablarch/component-configuration  https://nablarch.github.io/schema/component-configuration.xsd">

    <!-- テーブル定義 -->
    <import file="nablarch/schema-config.xml"/>

    <!-- 精査に使用する文字集合定義 -->
    <import file="tiscon4-charset-definition.xml"/>

    <!-- DomainManager 実装クラス設定 -->
    <component name="domainManager" class="jp.co.tis.tiscon4.domain.Tiscon4DomainManager"/>

    <!-- BeanValidation実装クラス -->
    <component name="validationStrategy" class="nablarch.common.web.validator.BeanValidationStrategy">
        <!-- バリデーションエラー時にリクエストスコープに値をコピーする -->
        <property name="copyBeanToRequestScopeOnError" value="true"/>
    </component>


    <!-- 環境設定ファイル -->
    <config-file file="common.config"/>
    <config-file file="env.config"/>

    <!-- Nablarch共通機能 -->
    <!-- コード機能 -->
    <import file="nablarch/common/code.xml"/>
    <!-- 自動採番型を持たないRDBMSで、ユニバーサルDAOを使用するための設定 -->
    <import file="nablarch/common/dao.xml"/>

    <!-- web固有設定の読み込み -->
    <!-- データベース設定 -->
    <!--
    下記設定ファイルを使用することで、JNDIを用いてコネクションがルックアップされる
    ルックアップに使用する名前は、configファイル中で、「nablarch.connectionFactory.jndiResourceName」というプレースホルダーに設定する。

    ローカルのデータソースからコネクションを取得したい場合は、アーキタイプから生成した直後のプロジェクトに含まれるdb-for-webui_dev.xmlを参考に設定すること。
    -->
    <import file="nablarch/webui/db-for-webui.xml"/>

    <!-- エラーページ設定 -->
    <import file="nablarch/webui/error-page-for-webui.xml"/>

    <!-- ファイルパス設置 -->
    <import file="nablarch/webui/filepath-for-webui.xml"/>

    <!-- インターセプタの実行順定義 -->
    <import file="nablarch/webui/interceptors.xml"/>

    <!-- ファイルアップロード機能設定 -->
    <import file="nablarch/webui/multipart.xml"/>

    <!-- カスタムタグ設定 -->
    <import file="nablarch/webui/nablarch-tag.xml"/>

    <!-- 二重サブミット防止機能 -->
    <import file="nablarch/webui/double-submission.xml"/>

    <!-- hidden暗号化機能を使用しないリクエストID -->
    <list name="noHiddenEncryptionRequestIds">
        <!-- <value></value> -->
    </list>

    <!-- パッケージマッピングの設定 -->
    <component name="packageMapping"
               class="nablarch.integration.router.RoutesMapping">
        <property name="routes" value="routes.xml"/>
        <property name="baseUri" value=""/>
        <property name="checkInterval" value="${nablarch.routesMapping.checkInterval}"/>
        <property name="basePackage" value="${nablarch.commonProperty.basePackage}"/>
    </component>

    <!-- セッションストア機能 -->
    <import file="nablarch/webui/session-store.xml"/>
    <!-- TODO: アプリケーションサーバが冗長化されている場合は、HIDDENストアの暗号化に使用するコンポーネントのプロパティに明示的に暗号化/復号のキーを設定する。-->
    <!--
    <component name="hiddenStoreEncryptor" class="nablarch.common.encryption.AesEncryptor">
      <property name="key" value="1234567890123456" />
      <property name="iv" value="6543210987654321" />
    </component>
    -->

    <component name="httpErrorHandler" class="nablarch.fw.web.handler.HttpErrorHandler">
        <property name="defaultPages">
            <map>
                <!-- TODO: 適切なエラー画面作成して設定してください。設定の際は、あわせてweb.xmlも修正してください -->
                <entry key="4.." value="/errorPages/USER_ERROR.jsp"/>
                <entry key="403" value="/errorPages/PERMISSION-ERROR.jsp"/>
                <entry key="404" value="/errorPages/PAGE_NOT_FOUND_ERROR.jsp"/>
                <entry key="413" value="/errorPages/REQUEST_ENTITY_TOO_LARGE.jsp"/>
                <entry key="5.." value="/errorPages/ERROR.jsp"/>
                <entry key="503" value="/errorPages/SERVICE-UNAVAILABLE-ERROR.jsp"/>
            </map>
        </property>
    </component>

    <!-- ダイアレクト設定 -->
    <!-- TODO:使用するDBに合わせてダイアレクトを設定すること -->
    <component name="dialect" class="nablarch.core.db.dialect.H2Dialect"/>


    <!-- ハンドラキュー構成 -->
    <component name="webFrontController"
               class="nablarch.fw.web.servlet.WebFrontController">

        <property name="handlerQueue">
            <list>
                <component class="nablarch.fw.web.handler.HttpCharacterEncodingHandler"/>

                <component class="nablarch.fw.handler.GlobalErrorHandler"/>

                <component name="httpResponseHandler"
                           class="nablarch.fw.web.handler.HttpResponseHandler">
                    <property name="customResponseWriter" ref="thymeleafResponseWriter"/>
                </component>

                <component class="nablarch.fw.web.handler.SecureHandler"/>

                <component-ref name="multipartHandler"/>

                <component-ref name="sessionStoreHandler"/>

                <component class="nablarch.fw.web.handler.NormalizationHandler"/>

                <component class="nablarch.fw.web.handler.ForwardingHandler"/>

                <component-ref name="httpErrorHandler"/>

                <component-ref name="nablarchTagHandler"/>

                <component-ref name="dbConnectionManagementHandler"/>

                <component-ref name="transactionManagementHandler"/>

                <component-ref name="packageMapping"/>
            </list>
        </property>
    </component>


    <!-- 初期化が必要なコンポーネント -->
    <component name="initializer"
               class="nablarch.core.repository.initialization.BasicApplicationInitializer">
        <property name="initializeList">
            <list>
                <!-- web/code.xml:コードのローダ -->
                <component-ref name="codeLoader"/>
                <!-- web/code.xml:コードのキャッシュ -->
                <component-ref name="codeCache"/>
                <!-- web/session-store.xml:DBストア-->
                <component-ref name="dbStore"/>
                <!-- パッケージマッピング-->
                <component-ref name="packageMapping"/>
            </list>
        </property>
    </component>

    <component name="templateEngine" class="org.thymeleaf.TemplateEngine" autowireType="None">
        <property name="templateResolver">
            <!--
             htmlファイル編集を即時反映させるため、クラスパスではなくファイルシステムからテンプレートを読み込む。
             キャッシュ機能はオフに設定。
             *:warファイルとしては動作しないので、開発時専用の設定
            -->
            <component class="org.thymeleaf.templateresolver.FileTemplateResolver">
                <property name="prefix" value="src/main/resources/template/"/>
                <property name="characterEncoding" value="UTF-8"/>
                <property name="cacheable" value="false"/>
            </component>
        </property>
    </component>

    <component name="thymeleafResponseWriter"
               class="nablarch.fw.web.handler.responsewriter.thymeleaf.ThymeleafResponseWriter"
               autowireType="None">
        <property name="templateEngine" ref="templateEngine"/>
    </component>

</component-configuration>
